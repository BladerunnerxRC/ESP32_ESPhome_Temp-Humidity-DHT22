substitutions:
  temperature_calibration: "0.0"
  humidity_calibration: "0.0"
  update_interval_s: "30s"
  update_interval_wifi: "60s"

esphome:
  name: "enviro-b2"
  friendly_name: ENVIRO-B2

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: recommended # Options: recommended, dev, or latest

# Enable logging
logger:
  level: WARN #INFO VERY_VERBOSE ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret enviro_b2_api_key

ota:
- platform: esphome
  password: !secret enviro_b2_ota_pwd

# Sync time with Home Assistant
time:
- platform: homeassistant
  id: ha_time
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  output_power: 15.5dB
  manual_ip:
    static_ip: 10.100.50.77
    gateway: 10.100.50.1
    subnet: 255.255.255.0
    dns1: 8.8.8.8
    dns2: 8.8.4.4
  on_connect:
    then:
    - switch.turn_on: onboard_led
  on_disconnect:
    then:
    - switch.turn_off: onboard_led
    - logger.log: "WiFi disconnected. Waiting 30 seconds before deciding to restart."
    - delay: 30s
    - if:
        condition:
          lambda: 'return !WiFi.isConnected();'
        then:
        - logger.log: "WiFi still disconnected after delay. Restarting now."
        - lambda: |-
            ESP.restart();
  ap:
    ssid: !secret enviro_b2_ap_sid
    password: !secret enviro_b2_ap_pwd

# captive_portal:

sensor:
- platform: wifi_signal
  name: "WiFi Signal"
  update_interval: ${update_interval_wifi}
  device_class: signal_strength

- platform: dht
  pin: GPIO26
  temperature:
    name: "DHT22_Temperature"
    id: temp
    filters:
    - lambda: return x + ${temperature_calibration};
  humidity:
    name: "DHT22_Humidity"
    id: humidity
    filters:
    - lambda: return x + ${humidity_calibration};
  update_interval: ${update_interval_s}
- platform: uptime
  id: enviro_b2_uptime_sensor
  name: "ENVIRO-B2 Uptime"

binary_sensor:
- platform: status
  name: "Connection Status"
  id: connection_status
  entity_category: diagnostic

- platform: homeassistant
  name: "Reboot ENVIRO-B2 Trigger"
  entity_id: input_boolean.reboot_enviro_b2
  id: reboot_trigger
  on_press:
  - if:
      condition:
        lambda: 'return id(enviro_b2_uptime_sensor).state > 60;'
      then:
      - logger.log: "Manual reboot requested via Home Assistant (passes debounce)"
      # - repeat:
      #    count: 6   # 6 cycles x 500ms = 3 seconds
      #    then:
      #      - switch.turn_on: onboard_led
      #      - delay: 250ms
      #      - switch.turn_off: onboard_led
      #      - delay: 250ms
      - homeassistant.service:
          service: input_boolean.turn_off
          data:
            entity_id: input_boolean.reboot_enviro_b2
      - logger.log: "Device rebooting now"
      - switch.turn_on: reboot_enviro_b2_restart
      else:
      - logger.log: "Debounce blocked reboot: uptime too short"
      - homeassistant.service:
          service: input_boolean.turn_off
          data:
            entity_id: input_boolean.reboot_enviro_b2

# Define the onboard LED
switch:
- platform: gpio
  name: "Wifi Connect LED Switch"
  pin: 2
  id: onboard_led
  inverted: false # Adjust this if your LED logic is not inverted
- platform: restart
  name: "Reboot_ENVIRO-B2"
  id: reboot_enviro_b2_restart
